[tool.poetry]
name = "graspologic"
version = "3.4.1"
description = "A set of Python modules for graph statistics"
repository = "https://github.com/graspologic-org/graspologic"
authors = [
    "Eric Bridgeford", 
    "Jaewon Chung <j1c@jhu.edu>", 
    "Benjamin Pedigo", 
    "Bijan Varjavand",
]
maintainers = [
    "Dax Pryce <daxpryce@microsoft.com>"
]
license = "MIT"
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Mathematics",
]
include = [
    "graspologic",
    "graspologic/**/*.typed",
    "graspologic/datasets/**/*.edgelist",
    "graspologic/datasets/**/*.csv",
    "graspologic/layouts/include/**/colors-100.json"
]
exclude = [
    "tests"
]

[tool.poetry.dependencies]
python = "^3.9,<3.13"
anytree = "^2.12.1"
beartype = "^0.18.5"
gensim = "^4.3.2"
graspologic-native = "^1.2.1"
hyppo = "^0.4.0"
joblib = "^1.4.2"
matplotlib = "^3.8.4"
networkx = "^3"
numpy = "^1.26.4"
POT = "^0.9"
seaborn = "^0.13.2"
scikit-learn = "^1.4.2"
scipy = "1.12.0"
statsmodels = "^0.14.2"
typing-extensions = "^4.4.0"
umap-learn = "^0.5.6"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6"
ipython = "^8.8"
mypy = "^1.10.0"
nbsphinx = "^0.9.4"
numpydoc = "^1.1.0"
pandoc = "^2.3.0"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
sphinx = "^7.3.7"
sphinxcontrib-rawfiles = "^0.1.1"
sphinx-rtd-theme = "^2.0.0"
testfixtures = "^8.2.0"
pipdeptree = "^2.20.0"
poethepoet = "^0.26.1"
ruff = "^0.4.4"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
style = "pep440"
vcs = "git"
bump = true
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(base, stage, revision, dev=distance) }}
    {%- endif -%}
"""
[tool.poetry-dynamic-versioning.files."graspologic/version.py"]
persistent-substitution = true
initial-content-jinja = """
# This version placeholder will be replaced during package build.
# Do not commit this file.
__version__ = {%- if distance == 0 -%}
    "{{ serialize_pep440(base, stage, revision) }}"
{%- else -%}
    "{{ serialize_pep440(base, stage, revision, dev=distance) }}"
{%- endif -%}
#
#
def __version() -> str:
    return __version__
"""

[tool.poe.tasks]
_sort_imports = "ruff check --select I --fix . --preview"
_format_code = "ruff format  . --preview"
static_checks = 'ruff check . --preview'
clean = "rm -rf docs/_build"
type_check = "mypy ./graspologic"
fix = "ruff  --preview check --fix ."
fix_unsafe = "ruff check --preview --fix --unsafe-fixes ."

# Formatting 
format = ['_sort_imports', '_format_code']

# Docs Tasks
docs = "sphinx-build -W -a docs/ docs/_build/html"
docsWithTutorials = "sphinx-build -W -t build_tutorials -a docs/ docs/_build/html"

# Testing Tasks
tests = "pytest tests"
test_only = "pytest -s -k"
coverage = "python -m pytest --co --cov=graspologic graspologic tests"
fast_test = "pytest tests --ignore=tests/test_latentdistributiontest.py --ignore=tests/test_latentpositiontest.py"

lint = ["static_checks", "type_check"]
validate = ["lint", "coverage", "docs", "tests"]


[tool.ruff.lint]
select = [
    "E4",
    # "E7",
    "E9",
    "W291",
    "YTT",
    "T10",
    "ICN",
    "INP",
    "Q",
    "RSE",
    "SLOT",
    "INT",
    "FLY",
    "LOG",
    "C90",
    # "T20",
    # "D",
    # "RET",
    # "PD",
    # "N",
    # "PIE",
    # "SIM",
    # "S",
    # "G",
    # "ERA",
    "ASYNC",
    # "TID",
    # "UP",
    # "SLF",
    # "BLE",
    # "C4",
    "I",
    # "F",
    # "A",
    # "ARG",
    # "PTH",
    # "RUF",
    # "B",
    "TCH",
    # "DTZ",
    # "PYI",
    #"PT",
    # "EM",
    # "TRY",
    # "PERF",
    # "CPY",

    # "FBT", # use named arguments for boolean flags
    # "TD", # todos
    # "FIX", # fixme
    # "FURB" # preview rules
    # ANN # Type annotations, re-enable when we get bandwidth
]
ignore = [
    # Deprecated Rules
    "ANN101",
    "ANN102",
    # Conflicts with interface argument checking
    "ARG002",
    "ANN204",
    # TODO: Inspect these pandas rules for validity
    "PD002", # prevents inplace=True
    # TODO RE-Enable when we get bandwidth
    "PERF203", # Needs restructuring of errors, we should bail-out on first error
    "C901",    # needs refactoring to remove cyclomatic complexity
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "D", "ANN", "T201", "ASYNC", "ARG", "PTH", "TRY", "SLF"]
"docs/*" = ["INP001"]
"*.ipynb" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"